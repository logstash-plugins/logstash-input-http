import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group 'org.logstash.plugins.input.http'
version rootProject.file('VERSION').text.trim()

description = "HTTP Input Netty implementation"

String log4jVersion = '2.17.0'
String nettyVersion = '4.1.100.Final'
String junitVersion = '5.9.2'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    implementation "io.netty:netty-buffer:${nettyVersion}"
    implementation "io.netty:netty-codec:${nettyVersion}"
    implementation "io.netty:netty-codec-http:${nettyVersion}"
    implementation "io.netty:netty-common:${nettyVersion}"
    implementation "io.netty:netty-transport:${nettyVersion}"
    implementation "io.netty:netty-handler:${nettyVersion}"
    implementation "io.netty:netty-transport-native-unix-common:${nettyVersion}" // this is needed from Netty 4.1.78.Final on
    compileOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}" // provided by Logstash
}

test {
    useJUnitPlatform()
    systemProperties.put "io.netty.leakDetectionLevel", "paranoid"
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

task run (type: JavaExec, dependsOn: classes) {
    // turn on or off ssl
    if (project.hasProperty('providedargs')) {
        args(providedargs.split(','))
    }
    description = "Plugin testing"
    mainClass = "org.logstash.plugins.input.http.Runner"
    classpath = sourceSets.main.runtimeClasspath
}

task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-input-http_jars.rb')
            jars_file.newWriter().withWriter { w ->
                w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
                    w << "require \'jar_dependencies\'\n"
                    configurations.runtimeClasspath.allDependencies.each {
                        w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
                    }
                w << "require_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
            }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
            configurations.runtimeClasspath.allDependencies.each { dep ->
                File f = configurations.runtimeClasspath.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
                    String groupPath = dep.group.replaceAll('\\.', '/')
                    File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
                    newJarFile.mkdirs()
                    Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
            }
        String projectGroupPath = project.group.replaceAll('\\.', '/')
            File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
            projectJarFile.mkdirs()
            Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
    }
}

vendor.dependsOn(jar, generateGemJarRequiresFile)

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}
